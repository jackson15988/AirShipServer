<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:component-scan
		base-package="com.airship.server"></context:component-scan>




	<!-- 读取项目的资源配置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>




	<!-- 配置C3p0數據來源， 這裡取得db.properties的配置 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driveClass}"></property>
		<!-- 初始化連接 -->
		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>

		<property name="minPoolSize" value="20" />
		<!-- 連接池保留最大連接數 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		<!-- 最大空閒時間 超過六十秒未被使用則被丟棄 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		<!-- 這個跟死鎖有關 -->
		<property name="maxStatements" value="0" />

		<property name="checkoutTimeout" value="30000" />

		<property name="breakAfterAcquireFailure" value="true" />
		<!-- 獲取失敗超時次數 -->
		<property name="acquireRetryAttempts" value="0" />

		<!-- 獲取連線超時時間 -->
		<property name="autoCommitOnClose" value="false" />
		<!-- 每60秒檢查數據庫是否有空的連接持 -->
		<property name="idleConnectionTestPeriod" value="20" />

		<!--numHelperThreads：异步操作，提升性能通过多线程实现多个操作同时被执行。Default: 3 -->
		<property name="numHelperThreads" value="3" />
		<!--acquireIncrement：链接用完了自动增量3个。 -->
		<property name="acquireIncrement" value="3" />
		<!--autoCommitOnClose：连接关闭时默认将所有未提交的操作回滚。 -->
	</bean>

	<!-- 配置SpringJDBCTemplate -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>



	<bean id="jedisPoolConfig"
		class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="1000" />
		<property name="minIdle" value="100" />
		<property name="maxIdle" value="500" />
		<property name="maxWaitMillis" value="10000" />
		<property name="blockWhenExhausted" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testOnBorrow" value="true" />
	</bean>
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:poolConfig-ref="jedisPoolConfig" p:usePool="true"
		p:hostName="45.32.49.87" p:port="6379" p:password="asBP43Mg"
		p:database="10">
	</bean>

	<bean id="redisTemplate"
		class="org.springframework.data.redis.core.RedisTemplate"
		p:connectionFactory-ref="jedisConnectionFactory">
	</bean>


	<!-- 配置HibernateTemplate -->
	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="cacheQueries" value="true" />

	</bean>


	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<!-- hibernate配置信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<!-- 开启二级缓存 ehcache -->
				<!-- 默认情况下二级缓存只会对load get 之类的方法缓存 -->
				<!-- 想支持list iterator 之类的方法也使用缓存，必须跟查询缓存一起使用，重写查询方法加上 .setCacheable(true) -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- 开启查询的二级缓存 如果不需要就不设置 -->
				<!-- 一般Hibernate的二级缓存实体和属性的缓存映射，如果需要将查询数据也二级缓存，需要使用hibernate.cache.use_query_cache开启。 -->
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<!-- Hibernate4.0以上设置factory -->
				<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
				<!-- 二級緩存文件存取位置 -->
				<prop
					key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop>
			</props>
		</property>
		<!-- 扫描hibernate注解配置的entity -->
		<property name="packagesToScan" value="com.funding.*" />
	</bean>




	<!-- 配置 NamedParameterJdbcTemplate, 該物件可以使用具名引數, 其沒有無引數的構造器, 所以必須為其構造器指定引數 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource"></constructor-arg>
	</bean>



	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务增强处理Bean，指定事务管理器 -->
	<tx:advice id="transactionAdvice"
		transaction-manager="transactionManager">
		<!-- 配置详细事务处理语义 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED"
				isolation="DEFAULT" />
			<tx:method name="update*" propagation="REQUIRED"
				isolation="DEFAULT" />
			<tx:method name="delete*" propagation="REQUIRED"
				isolation="DEFAULT" />
			<tx:method name="batch*" propagation="REQUIRED"
				isolation="DEFAULT" />
			<tx:method name="new*" propagation="REQUIRED"
				isolation="DEFAULT" />

			<tx:method name="get*" propagation="SUPPORTS"
				isolation="DEFAULT" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS"
				isolation="DEFAULT" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS"
				isolation="DEFAULT" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS"
				isolation="DEFAULT" read-only="true" />

			<!-- 其他采用默认事务方式 -->
			<tx:method name="*" propagation="REQUIRED"
				isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>

	<!-- Spring aop事务管理 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.tzz.web.service..*Impl.*(..))" />
		<!-- 指定在txAdvice切入点应用txAdvice事务增强处理 -->
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>


</beans>